
/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	com.esria.samples.dashboard.view
 *	Class: 		NewService
 *	Source: 	D:\workspace\MyDsh\src\com\esria\samples\dashboard\view\NewService.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2010.04.27 12:00:32 CST
 */

package com.esria.samples.dashboard.view
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.Form;
import mx.containers.HBox;
import mx.containers.VBox;
import mx.controls.Button;
import mx.controls.Label;
import mx.controls.TextInput;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.DragEvent;
import mx.events.FlexEvent;
import mx.styles.*;



//	begin class def

public class NewService
	extends mx.containers.VBox
{

	//	instance variables
	[Bindable]
/**
 * @private
 **/
	public var englishName : mx.controls.TextInput;

	[Bindable]
/**
 * @private
 **/
	public var form1 : mx.containers.Form;

	[Bindable]
/**
 * @private
 **/
	public var form2 : mx.containers.Form;

	[Bindable]
/**
 * @private
 **/
	public var formname : mx.controls.TextInput;

	[Bindable]
/**
 * @private
 **/
	public var save : mx.controls.Button;

	[Bindable]
/**
 * @private
 **/
	public var stateBox : mx.containers.HBox;

	[Bindable]
/**
 * @private
 **/
	public var txtActive : mx.controls.TextInput;


	//	type-import dummies


	//	Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.VBox
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.controls.Label
        ,
        stylesFactory: function():void {
          this.fontSize = 12;
        }
        ,
        propertiesFactory: function():Object { return {
          text: "sendPKG"
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.containers.Form
        ,
        id: "form1"
        ,
        events: {
          dragEnter: "__form1_dragEnter",
          dragDrop: "__form1_dragDrop"
        }
        ,
        stylesFactory: function():void {
          this.verticalGap = 10;
          this.borderStyle = "solid";
          this.backgroundColor = 16777215;
        }
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          percentHeight: 45.0
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.Label
        ,
        stylesFactory: function():void {
          this.fontSize = 12;
        }
        ,
        propertiesFactory: function():Object { return {
          text: "receivePKG"
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.containers.Form
        ,
        id: "form2"
        ,
        events: {
          dragEnter: "__form2_dragEnter",
          dragDrop: "__form2_dragDrop"
        }
        ,
        stylesFactory: function():void {
          this.verticalGap = 10;
          this.borderStyle = "solid";
          this.backgroundColor = 16777215;
        }
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          percentHeight: 45.0
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.containers.HBox
        ,
        id: "stateBox"
        ,
        stylesFactory: function():void {
          this.borderStyle = "solid";
        }
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          percentHeight: 5.0,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Label
              ,
              propertiesFactory: function():Object { return {
                text: "中文名",
                percentWidth: 10.0
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.TextInput
              ,
              id: "formname"
              ,
              propertiesFactory: function():Object { return {
                percentWidth: 25.0
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Label
              ,
              propertiesFactory: function():Object { return {
                text: "英文名",
                percentWidth: 10.0
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.TextInput
              ,
              id: "englishName"
              ,
              propertiesFactory: function():Object { return {
                percentWidth: 25.0
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Label
              ,
              propertiesFactory: function():Object { return {
                text: "active",
                percentWidth: 5.0
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.TextInput
              ,
              id: "txtActive"
              ,
              propertiesFactory: function():Object { return {
                percentWidth: 15.0
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Button
              ,
              id: "save"
              ,
              events: {
                click: "__save_click"
              }
              ,
              propertiesFactory: function():Object { return {
                label: "保存",
                percentWidth: 5.0
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Button
              ,
              events: {
                click: "___NewService_Button2_click"
              }
              ,
              propertiesFactory: function():Object { return {
                label: "清空",
                percentWidth: 5.0
              }}
            })
          ]
        }}
      })
    ]
  }}
})

	//	constructor (Flex display object)
    /**
     * @private
     **/
	public function NewService()
	{
		super();

		mx_internal::_document = this;

		//	our style settings
		//	initialize component styles
		if (!this.styleDeclaration)
		{
			this.styleDeclaration = new CSSStyleDeclaration();
		}

		this.styleDeclaration.defaultFactory = function():void
		{
			this.fontSize = 12;
		};



		//	properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;

		//	events
		this.addEventListener("creationComplete", ___NewService_VBox1_creationComplete);

	}

	//	initialize()
    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);



		super.initialize();
	}

	//	scripts
	//	<Script>, line 8 - 199

            import mx.controls.listClasses.ListBase;
            import mx.controls.List;
            import mx.events.*;
            import mx.managers.DragManager;
            import mx.rpc.events.ResultEvent;
            import mx.rpc.http.mxml.HTTPService;
            import mx.states.State;
            import mx.utils.StringUtil;
            import com.yspay.*;
            import com.yspay.util.FunctionDelegate;
            import mx.controls.TextInput;
            import mx.core.UIComponent;
            import mx.containers.Form;
            import mx.containers.FormItem;
            import mx.controls.Alert;
            import mx.managers.CursorManager;
            import com.yspay.pool.*;
            import com.yspay.FunctionHelper;

            private var _pool:Pool;
            private var func_helper:FunctionHelper = new FunctionHelper;
            private var dts_event_listener:Function;

            private function onInit():void
            {
                _pool = this.parentDocument._pool;
            }

            private function dragEnterHandler(event:DragEvent):void
            {
                if (form1 == event.currentTarget)
                    DragManager.acceptDragDrop(form1);
                else if (form2 == event.currentTarget)
                    DragManager.acceptDragDrop(form2);
            }

            private function dragDropHandler(event:DragEvent):void
            {
                if (event.dragSource.hasFormat("self"))
                {
                    return;
                }
                var o:Object = (event.dragInitiator as ListBase).selectedItem;
                var dts:DBTable = _pool.dts as DBTable;
                dts.AddQuery(o.dts, Query, o.dts, this);
                var selectedForm:Form = (event.currentTarget as Form);
                dts_event_listener = func_helper.create(OnDtsQueryComplete, selectedForm);
                this.addEventListener(dts.select_event_name, dts_event_listener);
                CursorManager.setBusyCursor();
                dts.DoQuery(o.dts);
            }

            private function OnDtsQueryComplete(event:DBTableQueryEvent, arg:Form):void
            {
                CursorManager.removeBusyCursor();
                var dts:DBTable = _pool.dts as DBTable;
                var temp:String = dts[event.query_name][dts.arg_select];
                temp = StringUtil.trim(temp);
                var tempXml:XML = new XML(temp);
                addFormItem(tempXml, arg);
                this.removeEventListener(dts.select_event_name, dts_event_listener);
            }

            private function addFormItem(arg:XML, selectedForm:Form):void
            {
                var formitem:MyFormItem = new MyFormItem;
                var contentXml:XML = arg;
                formitem.descXml = contentXml;
                formitem.label = contentXml.display.LABEL.@text;
                selectedForm.addChild(formitem);
            }

            private function submitHandler():void
            {
                var str:String = "";
                var nameOfWindow:String = StringUtil.trim(formname.text);
                if (nameOfWindow == "" || StringUtil.trim(englishName.text) == "" || txtActive.text == "")
                {
                    Alert.show("表单名或active不能为空!", "提示");
                    return;
                }

                (this.parent as Pod).title = formname.text;
                var resultOfService:XML = <L KEY="SERVICES">
                        <L KEY="SendPKG" KEYNAME="发送报文" VALUE="">
                            <L KEY="HEAD" KEYNAME="报文头" VALUE="">
                                <A KEY="version" KEYNAME="version" VALUE="1.0"/>
                                <A KEY="type" KEYNAME="type" VALUE="request"/>
                                <A KEY="reqflag" KEYNAME="reqflag" VALUE="true"/>
                                <A KEY="reqtype" KEYNAME="reqtype" VALUE="json2userbus"/>
                                <A KEY="respflag" KEYNAME="respflag" VALUE="true"/>
                                <A KEY="resptype" KEYNAME="resptype" VALUE="json"/>
                                <A KEY="active" KEYNAME="active" />
                            </L>
                            <L KEY="BODY" KEYNAME="报文体" VALUE="">                              
                            </L>
                        </L>
                        <L KEY="RecvPKG" KEYNAME="接收报文" VALUE="">
                            <L KEY="HEAD" KEYNAME="报文头" VALUE="">
                                <A KEY="version" KEYNAME="version" VALUE="1.0"/>
                                <A KEY="type" KEYNAME="type" VALUE="request"/>
                                <A KEY="reqflag" KEYNAME="reqflag" VALUE="true"/>
                                <A KEY="reqtype" KEYNAME="reqtype" VALUE="json2userbus"/>
                                <A KEY="respflag" KEYNAME="respflag" VALUE="true"/>
                                <A KEY="resptype" KEYNAME="resptype" VALUE="json"/>
                                <A KEY="active" KEYNAME="active"/>
                            </L>
                            <L KEY="BODY" KEYNAME="报文体" VALUE="">
                            </L>
                        </L>
                    </L>;

                resultOfService.@KEYNAME = formname.text;
                resultOfService.@VALUE = englishName.text;
                for each (var activeXml:XML in resultOfService..A.(@KEYNAME == 'active'))
                {
                    activeXml.@VALUE = txtActive.text;
                }
                var form1Len:int = form1.getChildren().length;
                if (form1Len > 0)
                {
                    for (var i:int = 0; i < form1Len; i++)
                    {
                        var temp:XML = (form1.getChildAt(i) as MyFormItem).descXml;
                        var inserted:XML = <L/>;
                        inserted.@KEY = temp.localName();
                        inserted.@KEYNAME = (form1.getChildAt(i) as MyFormItem).label;
                        inserted.@VALUE = temp.localName() + "://" + temp.services.@NAME;
                        for each (var bodyXml:XML in resultOfService..L.(@KEYNAME == '报文体'))
                        {
                            bodyXml.appendChild(inserted);
                            break;
                        }
                    }
                }
                var form2Len:int = form2.getChildren().length;
                if (form2Len > 0)
                {
                    for (var j:int = 0; j < form2Len; j++)
                    {
                        var temp2:XML = (form2.getChildAt(j) as MyFormItem).descXml;
                        var inserted1:XML = <L/>;
                        inserted1.@KEY = temp2.localName();
                        inserted1.@KEYNAME = (form2.getChildAt(j) as MyFormItem).label;
                        inserted1.@VALUE = temp2.localName() + "://" + temp2.services.@NAME;
                        var k:int = 0;
                        for each (var bodyXml1:XML in resultOfService..L.(@KEYNAME == '报文体'))
                        {
                            k++;
                            if (k == 2)
                                bodyXml1.appendChild(inserted1);
                        }
                    }
                }
                var resultXml:XML = <L TYPE="SERVICES"  VER="20091120999999" ISUSED="0" APPNAME="MapServer" CUSER="xing"/>;
                resultXml.@NAME = englishName.text;
                resultXml.appendChild(resultOfService);
                str += resultXml.toXMLString();
                //str = '<?xml version="1.0" encoding="gbk"?>' + str;
                Alert.show(str);
                var dts:DBTable = _pool.dts as DBTable;

                this.addEventListener(dts.insert_event_name, OnDtsInsertComplete);
                dts.Insert([dts.arg_insert], ['<?xml version="1.0" encoding="gbk"?>' + str], this);
            }


            private function OnDtsInsertComplete(event:DBTableInsertEvent):void
            {
                var dts:DBTable = _pool.dts as DBTable;
                if (event.user_bus == null)
                {
                    Alert.show("保存失败！！");
                    this.removeEventListener(dts.insert_event_name, OnDtsInsertComplete);
                    return;
                }
                var dts_no:String = event.user_bus.GetFirst('__DICT_OUT');
                this.removeEventListener(dts.insert_event_name, OnDtsInsertComplete);
                dts.AddQuery(dts_no, Query, dts_no, this);
                this.addEventListener(dts.select_event_name, OnQueryNewDtsWindow);
                dts.DoQuery(dts_no);
                var info:DBTable = _pool.info as DBTable;
                info.DoQuery('SERVICES');
            }

            private function OnQueryNewDtsWindow(event:DBTableQueryEvent):void
            {
                var dts:DBTable = _pool.dts as DBTable;
                this.removeEventListener(dts.insert_event_name, OnQueryNewDtsWindow);
            }
        

	//	end scripts


    //	supporting function definitions for properties, events, styles, effects
/**
 * @private
 **/
public function ___NewService_VBox1_creationComplete(event:mx.events.FlexEvent):void
{
	onInit()
}

/**
 * @private
 **/
public function __form1_dragEnter(event:mx.events.DragEvent):void
{
	dragEnterHandler(event);
}

/**
 * @private
 **/
public function __form1_dragDrop(event:mx.events.DragEvent):void
{
	dragDropHandler(event);
}

/**
 * @private
 **/
public function __form2_dragEnter(event:mx.events.DragEvent):void
{
	dragEnterHandler(event);
}

/**
 * @private
 **/
public function __form2_dragDrop(event:mx.events.DragEvent):void
{
	dragDropHandler(event);
}

/**
 * @private
 **/
public function __save_click(event:flash.events.MouseEvent):void
{
	submitHandler()
}

/**
 * @private
 **/
public function ___NewService_Button2_click(event:flash.events.MouseEvent):void
{
	form1.removeAllChildren();form2.removeAllChildren(); (this.parent as Pod).title=''
}





	//	embed carrier vars
	//	end embed carrier vars


//	end class def
}

//	end package def
}
