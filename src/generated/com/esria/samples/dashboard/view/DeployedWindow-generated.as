
/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	com.esria.samples.dashboard.view
 *	Class: 		DeployedWindow
 *	Source: 	D:\workspace\MyDsh\src\com\esria\samples\dashboard\view\DeployedWindow.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2010.04.21 18:44:59 CST
 */

package com.esria.samples.dashboard.view
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.Box;
import mx.containers.Form;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.FlexEvent;
import mx.styles.*;



//	begin class def

public class DeployedWindow
	extends mx.containers.Box
{

	//	instance variables
	[Bindable]
/**
 * @private
 **/
	public var form : mx.containers.Form;


	//	type-import dummies


	//	Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.Box
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.Form
        ,
        id: "form"
        ,
        stylesFactory: function():void {
          this.verticalGap = 10;
          this.borderStyle = "solid";
          this.backgroundColor = 16777215;
        }
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          percentHeight: 100.0
        }}
      })
    ]
  }}
})

	//	constructor (Flex display object)
    /**
     * @private
     **/
	public function DeployedWindow()
	{
		super();

		mx_internal::_document = this;

		//	our style settings
		//	initialize component styles
		if (!this.styleDeclaration)
		{
			this.styleDeclaration = new CSSStyleDeclaration();
		}

		this.styleDeclaration.defaultFactory = function():void
		{
			this.fontSize = 12;
		};



		//	properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;

		//	events
		this.addEventListener("creationComplete", ___DeployedWindow_Box1_creationComplete);
		this.addEventListener("updateComplete", ___DeployedWindow_Box1_updateComplete);

	}

	//	initialize()
    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);



		super.initialize();
	}

	//	scripts
	//	<Script>, line 9 - 191

            import mx.core.Container;
            import com.yspay.pool.DBTableQueryEvent;
            import com.yspay.pool.DBTable;
            import com.yspay.YsVarStruct;
            import com.yspay.pool.QueryObject;
            import com.yspay.pool.Query;
            import com.yspay.pool.Pool;
            import mx.controls.TextInput;
            import mx.containers.*;
            import mx.utils.StringUtil;
            import mx.events.FlexEvent;

            private var _pool:Pool;
            private var dts_no:String;
            public var windows_name:String;


            public function OnInit():void
            {
                _pool = this.parentDocument._pool;

                var parent_pod:Pod = this.parent as Pod;
                trace(parent_pod.title);
                dts_no = parent_pod.title;

                var dts:DBTable = _pool.dts as DBTable;

                if (!dts.hasOwnProperty(dts_no))
                {
                    return;
                }

                var dts_xml:XML = new XML(dts[dts_no].__DICT_XML);
                trace(dts_xml);
                this.label = dts_xml.@TITLE;

                //              this.addEventListener(dts.select_event_name, OnQueryDtsComplete);

                // Show(this, dts_xml.elements());
            }

            protected function Show(container:Container, xml_list:XMLList):void
            {
                var url:String;
                var search_str:String = '://';

                //  this.addEventListener(_pool.dts.select_event_name, OnDtsQueryComplete);

                for each (var child:XML in xml_list)
                {
                    if (child.name().toString().toLocaleLowerCase() == 'windows')
                    {
                        trace(child);
                    }
                    else if (child.name().toString().toLocaleLowerCase() == 'dict')
                    {
                        trace(child.toString());
                        url = child.toString();
                        var idx:int = url.search(search_str);

                        if (idx > 0)
                        {
                            var query_key:String = url.substr(0, idx).toLocaleUpperCase();
                            var obj_key:String = url.substr(idx + search_str.length);
                            var dts_no:String = _pool.info[query_key][obj_key].Get().DTS;

                            var dts:DBTable = _pool.dts as DBTable;
                            dts.AddQuery(dts_no, Query, dts_no, this);
                            dts.DoQuery(dts_no);
                        }
                    }
                    else if (child.name().toString().toLocaleLowerCase() == 'button')
                    {
                        trace(child);
                    }
                    else
                    {
                        trace('no this display type');
                    }
                }
            }

            public function OnGetWindowsXml(event:DBTableQueryEvent):void
            {
                // trace(event.user_bus);
                var result:XML = new XML(_pool.dts[event.query_name].__DICT_XML);
                //<windows TITLE="登陆">Login
                //<DICT>DICT://ACCOUNT</DICT>
                //<DICT>DICT://PASSWORD_EN</DICT>
                //<BUTTON lable="sadfsadf">
                //    <SERVICES="YsAppYECX"/>
                //</BUTTON>
                //</windows>

                //Show(this, result);

            /*
               this.addEventListener(_pool.dts.select_event_name, OnDtsQueryComplete);
               for each (var temp:XML in result.children())
               {
               var url:String = temp.toString();
               var search_str:String = '://';
               var idx:int = url.search(search_str);

               var query_key:String = url.substr(0, idx).toLocaleUpperCase();
               var obj_key:String = url.substr(idx + search_str.length);

               //trace(_pool.info[query_key][obj_key].Get().DTS);
               var dts_no:String = _pool.info[query_key][obj_key].Get().DTS;

               var dts:DBTable = _pool.dts as DBTable;
               dts.AddQuery(dts_no, Query, dts_no, this);
               dts.DoQuery(dts_no);
               }
             */
            }

            private function OnQueryComplete(event:DBTableQueryEvent):void
            {
                var dts:DBTable = _pool.dts as DBTable;
                var contentXml:XML = new XML(StringUtil.trim(dts[event.query_name].__DICT_XML));

                trace(contentXml.name());
                var name:String = contentXml.name();
                if (name == 'DICT')
                {
                    var formitem:FormItem = new FormItem;
                    formitem.label = contentXml.display.LABEL.@text;
                    var ti:TextInput = new TextInput;
                    ti.width = 200;
                    trace(contentXml);
                    if (contentXml.services.@TYPE == "DOUBLE" || contentXml.services.@TYPE == "FLOAT")
                    {
                        ti.setStyle("textAlign", "right");
                    }
                    // ti.addEventListener(FlexEvent.ENTER, enterHandler);
                    if (contentXml.display.TEXTINPUT.@displayAsPassword == "0")
                    {
                        ti.displayAsPassword = false;
                    }
                    else
                    {
                        ti.displayAsPassword = true;
                    }
                    if (contentXml.display.TEXTINPUT.@length != null)
                    {
                        ti.maxChars = contentXml.display.TEXTINPUT.@length;
                        ti.toolTip = "最长输入" + ti.maxChars + "个字符";
                    }
                    formitem.addChild(ti);
                    ti.addEventListener(FlexEvent.ENTER, enterHandler);
                    form.addChild(formitem);
                }
                else if (name == 'BUTTON')
                {
                    trace('button');
                }

            }

            //若还有其它可获焦点组件？
            protected function enterHandler(event:FlexEvent):void
            {
                var length:uint = form.getChildren().length;
                var childindex:uint = form.getChildIndex((event.currentTarget as TextInput).parent);
                if (childindex >= length - 1)
                    childindex = 0;
                else
                {
                    childindex++;
                }
                var formitem:FormItem = form.getChildAt(childindex) as FormItem;
                for (var i:int = 0; i < formitem.getChildren().length; i++)
                {
                    if (formitem.getChildAt(i) is TextInput)
                    {
                        (formitem.getChildAt(i) as TextInput).setFocus();
                        break;
                    }
                }
            }
        

	//	end scripts


    //	supporting function definitions for properties, events, styles, effects
/**
 * @private
 **/
public function ___DeployedWindow_Box1_creationComplete(event:mx.events.FlexEvent):void
{
	OnInit()
}

/**
 * @private
 **/
public function ___DeployedWindow_Box1_updateComplete(event:mx.events.FlexEvent):void
{
	(this.parent as Pod).title=this.windows_name
}





	//	embed carrier vars
	//	end embed carrier vars


//	end class def
}

//	end package def
}
