
/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	com.esria.samples.dashboard.view
 *	Class: 		WindowContent
 *	Source: 	D:\workspace\MyDsh\src\com\esria\samples\dashboard\view\WindowContent.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2010.04.22 12:05:46 CST
 */

package com.esria.samples.dashboard.view
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.VBox;
import mx.controls.Button;
import mx.controls.DataGrid;
import mx.controls.dataGridClasses.DataGridColumn;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.DragEvent;
import mx.events.FlexEvent;
import mx.styles.*;



//	begin class def

public class WindowContent
	extends mx.containers.VBox
	implements mx.binding.IBindingClient
{

	//	instance variables
	[Bindable]
/**
 * @private
 **/
	public var dg : mx.controls.DataGrid;

	[Bindable]
/**
 * @private
 **/
	public var refresh : mx.controls.Button;


	//	type-import dummies


	//	Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.VBox
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.controls.Button
        ,
        id: "refresh"
        ,
        events: {
          click: "__refresh_click"
        }
        ,
        propertiesFactory: function():Object { return {
          label: "refresh"
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.DataGrid
        ,
        id: "dg"
        ,
        events: {
          dragEnter: "__dg_dragEnter",
          dragDrop: "__dg_dragDrop"
        }
        ,
        stylesFactory: function():void {
          this.fontSize = 12;
        }
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          percentHeight: 100.0,
          dragEnabled: true,
          dragMoveEnabled: false,
          columns: [_WindowContent_DataGridColumn1_c(), _WindowContent_DataGridColumn2_c()]
        }}
      })
    ]
  }}
})

	//	constructor (Flex display object)
    /**
     * @private
     **/
	public function WindowContent()
	{
		super();

		mx_internal::_document = this;

		//	our style settings



		//	properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;

		//	events
		this.addEventListener("creationComplete", ___WindowContent_VBox1_creationComplete);

	}

	//	initialize()
    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);

		var bindings:Array = _WindowContent_bindingsSetup();
		var watchers:Array = [];

		var target:WindowContent = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_com_esria_samples_dashboard_view_WindowContentWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					bindings,
					watchers);

		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


		super.initialize();
	}

	//	scripts
	//	<Script>, line 19 - 100

                import com.yspay.pool.QueryObject;
                import com.yspay.pool.DBTable;
                import com.yspay.pool.QueryWithIndex;
                import com.yspay.pool.Pool;
                import com.yspay.pool.DBTableInsertEvent;
                import com.yspay.pool.DBTableQueryEvent;
                import mx.collections.ArrayCollection;
                import flash.events.Event;
                import flash.net.SharedObject;
                import mx.containers.Form;
                import mx.containers.FormItem;
                import mx.containers.HBox;
                import mx.containers.TitleWindow;
                import mx.controls.*;
                import mx.core.Application;
                import mx.core.UIComponent;
                import mx.events.*;
                import mx.managers.DragManager;
                import mx.rpc.events.ResultEvent;
                import mx.rpc.http.mxml.HTTPService;
                import mx.states.State;
                import mx.utils.StringUtil;
                import com.yspay.*;
                import com.yspay.util.FunctionDelegate;
                import mx.managers.CursorManager;

                [Bindable]
                private var dp:ArrayCollection = new ArrayCollection;
                private var _pool:Pool;

                private function init_window():void
                {
                    _pool = this.parentDocument._pool as Pool;
                    onInit_window();
                }

                private function onInit_window():void
                {
                    dp.removeAll();
                    var info:DBTable = _pool.info as DBTable;
                    for each (var dict_obj:QueryObject in info.WINDOWS)
                    {
                        var ys_var:YsVarStruct = dict_obj.Get();
                        var o:Object = new Object;
                        o.name = ys_var.NAME.getValue();
                        o.dts = ys_var.DTS.getValue();
                        o.desc = ys_var.MEMO.getValue();
                        dp.addItem(o);
                    }
                }

                private function refreshHandler():void
                {
                    var info_query_windows:String = 'WINDOWS';
                    var info_query_windows_cond:String = "type='WINDOWS' and appname='MapServer'";
                    var info:DBTable = _pool.info as DBTable;
                    info.AddQuery(info_query_windows, QueryWithIndex, info_query_windows_cond, this);
                    CursorManager.setBusyCursor();
                    info.DoQuery(info_query_windows, 'NAME', 'VER');
                    this.addEventListener(info.select_event_name, InfoQueryComplete);
                }

                private function InfoQueryComplete(event:DBTableQueryEvent):void
                {
                    CursorManager.removeBusyCursor();
                    trace("--------------------Update window in pool-----------------------")
                    trace(event.user_bus);
                    onInit_window();
                }

                private function dragEnterHandlerForRemove(event:DragEvent):void
                {
                    if (event.dragSource.hasFormat("self"))
                        DragManager.acceptDragDrop(UIComponent(event.currentTarget));
                }

                private function dragDropHandlerForRemove(event:DragEvent):void
                {
                    (event.dragInitiator as UIComponent).parent.removeChild(event.dragInitiator as UIComponent);
                }
            

	//	end scripts


    //	supporting function definitions for properties, events, styles, effects
/**
 * @private
 **/
public function ___WindowContent_VBox1_creationComplete(event:mx.events.FlexEvent):void
{
	init_window()
}

/**
 * @private
 **/
public function __refresh_click(event:flash.events.MouseEvent):void
{
	refreshHandler()
}

private function _WindowContent_DataGridColumn1_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.headerText = "中文名字";
	temp.dataField = "name";
	return temp;
}

private function _WindowContent_DataGridColumn2_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.headerText = "英文名字";
	temp.dataField = "desc";
	return temp;
}

/**
 * @private
 **/
public function __dg_dragEnter(event:mx.events.DragEvent):void
{
	dragEnterHandlerForRemove(event)
}

/**
 * @private
 **/
public function __dg_dragDrop(event:mx.events.DragEvent):void
{
	dragDropHandlerForRemove(event)
}


	//	binding mgmt
    private function _WindowContent_bindingsSetup():Array
    {
        var result:Array = [];
        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (dp);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                dg.dataProvider = _sourceFunctionReturnValue;
            },
            "dg.dataProvider");
        result[0] = binding;

        return result;
    }

    private function _WindowContent_bindingExprs():void
    {
        var destination:*;
		[Binding(id='0')]
		destination = (dp);
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (WindowContent)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;



	//	embed carrier vars
	//	end embed carrier vars

	//	binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//	end class def
}

//	end package def
}
